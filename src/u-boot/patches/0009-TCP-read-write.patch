From 0d581b391b30c1211cbc9e6735d8f9e8d7593493 Mon Sep 17 00:00:00 2001
From: Mathias Gredal <mathiasgredal@icloud.com>
Date: Thu, 30 Jan 2025 01:59:19 +0100
Subject: [PATCH 09/10] TCP read/write

---
 Kconfig                           |  13 +-
 cmd/Kconfig                       |   6 -
 cmd/wasm.c                        | 743 +++++++++++++++++++++++++++++-
 configs/qemu-x86_wasm_defconfig   |   3 +-
 configs/qemu_arm64_wasm_defconfig |   5 +-
 include/wasm3/m3_exec.h           |   1 +
 include/wasm3/wasm3.h             |   3 +-
 lib/lwip/lwip/src/core/tcp_out.c  |   1 +
 lib/wasm3/m3_env.c                |  17 +-
 lib/wasm3/m3_info.c               |   1 +
 10 files changed, 748 insertions(+), 45 deletions(-)

diff --git a/Kconfig b/Kconfig
index c087a420..2906fbd8 100644
--- a/Kconfig
+++ b/Kconfig
@@ -742,6 +742,15 @@ config LDR_CPU
 	  generally used on processors from Analog Devices, but may be also
 	  be useful for other vendors.
 
+config WASM
+	bool "Use WebAssembly"
+	default n
+	select EFI_HTTP_BOOT
+	select PROT_TCP_LWIP
+	select PROT_TCP_SOCKET_LWIP
+	help
+	  Enable WebAssembly support.
+
 source "api/Kconfig"
 
 endmenu		# General setup
@@ -762,7 +771,8 @@ menu Networking
 
 choice
 	prompt "Networking stack"
-	default NET
+	default NET if !WASM
+	default NET_LWIP if WASM
 
 config NO_NET
 	bool "No networking support"
@@ -787,7 +797,6 @@ config NET_LWIP
 	  depend on CONFIG_NET (such as cmd/net.c enabled via CONFIG_CMD_NET).
 	  Therefore the two symbols CONFIG_NET and CONFIG_NET_LWIP are mutually
 	  exclusive.
-
 endchoice
 
 source "net/Kconfig"
diff --git a/cmd/Kconfig b/cmd/Kconfig
index 69347d60..1d7ddb4e 100644
--- a/cmd/Kconfig
+++ b/cmd/Kconfig
@@ -3038,9 +3038,3 @@ config CMD_MESON
 	  Enable useful commands for the Meson Soc family developed by Amlogic Inc.
 
 endif
-
-config WASM
-	bool "WASM"
-	default n
-	help
-	  Enable WebAssembly support
diff --git a/cmd/wasm.c b/cmd/wasm.c
index c02dd54e..45bab732 100644
--- a/cmd/wasm.c
+++ b/cmd/wasm.c
@@ -3,96 +3,801 @@
  * Copyright (C) 2025, Mathias Gredal, mathiasgredal@icloud.com.
  */
 
+#include "dm/device.h"
+#include "lwip/api.h"
+#include "lwip/err.h"
+#include "lwip/ip4_addr.h"
+#include "lwip/ip_addr.h"
+#include "lwip/netif.h"
+#include "lwip/pbuf.h"
+#include "lwip/tcp.h"
+#include "lwip/tcpbase.h"
+#include "lwip/timeouts.h"
+#include "net-common.h"
 #include <command.h>
 #include <fs.h>
 #include <log.h>
 #include <mapmem.h>
+#include <net-lwip.h>
+#include <stdint.h>
+#include <stdio.h>
 #include <vsprintf.h>
 #include <wasm3/wasm3.h>
 
+/*
+ * Macro to link a raw function into a WebAssembly (WASM) module.
+ *
+ * This macro wraps the `m3_LinkRawFunction` call and handles error checking.
+ * It links a host function (func_ptr) into the given WASM module under the
+ * "env" namespace with the specified name (func_name) and signature (sig).
+ *
+ * Parameters:
+ *   - module:    The WASM module to link the function into.
+ *   - func_name: Name of the function within the WASM module.
+ *   - sig:       Function signature string (e.g., "v(*i)" for void returning functions).
+ *   - func_ptr:  Pointer to the host function to be linked.
+ *
+ * Behavior:
+ *   - If the link operation fails with a critical error, it logs the error and
+ *     returns `1` to indicate failure.
+ *   - It tolerates `m3Err_functionLookupFailed`, as it may arise in dynamic linking scenarios.
+ */
+#define LINK_RAW_FUNCTION(module, func_name, sig, func_ptr)                                                            \
+    do                                                                                                                 \
+    {                                                                                                                  \
+        /* Attempt to link the raw function */                                                                         \
+        M3Result result = m3_LinkRawFunction(module, "env", func_name, sig, func_ptr);                                 \
+                                                                                                                       \
+        /* Handle errors from the linking process */                                                                   \
+        if (result != m3Err_none && result != m3Err_functionLookupFailed)                                              \
+        {                                                                                                              \
+            log_err("Error linking function '%s': %s\n", func_name, result);                                           \
+            return 1;                                                                                                  \
+        }                                                                                                              \
+    } while (0)
+
+/*
+ * Print a string from the WebAssembly (WASM) environment.
+ *
+ * This function retrieves a memory pointer and size from the WASM runtime,
+ * validates the memory range, and then prints the string to the console.
+ * It ensures safe access to the provided memory.
+ *
+ * Arguments:
+ *   - i_ptr: Pointer to the string in WASM memory.
+ *   - i_size: Size of the string (number of bytes).
+ *
+ * Behavior:
+ *   - The function validates the memory pointer and size to prevent out-of-bounds access.
+ *   - The string is printed to the console using the specified size.
+ *
+ * Returns:
+ *   - Success if the string is printed successfully.
+ *   - An error if the memory validation fails.
+ */
 m3ApiRawFunction(env_print)
 {
+    /* Retrieve the pointer to the string */
     m3ApiGetArgMem(void *, i_ptr);
-    m3ApiGetArg(uint32_t, i_size);
 
+    /* Retrieve the size of the string */
+    m3ApiGetArg(int32_t, i_size);
+
+    /* Validate that the memory range [i_ptr, i_ptr + i_size) is accessible */
     m3ApiCheckMem(i_ptr, i_size);
 
-    printf("%.*s", i_size, i_ptr);
+    /* Print the string to the console */
+    printf("%.*s", i_size, (char *)i_ptr);
 
+    /* Indicate successful execution */
     m3ApiSuccess();
 }
 
-static int do_wasm(struct cmd_tbl *cmdtp, int flag, int argc,
-                   char *const argv[])
+/*
+ * Check if a key has been pressed and retrieve its value.
+ *
+ * This function checks for pending input from the console. If a key is
+ * available, it reads and returns the key as a 32-bit integer. If no key
+ * has been pressed, it returns `-1` to indicate the absence of input.
+ *
+ * Returns:
+ *   - Key value (int32_t) if a key is pressed.
+ *   - `-1` if no key is available.
+ */
+m3ApiRawFunction(env_key_pressed)
+{
+    m3ApiReturnType(int32_t); // Declare the return type as a 32-bit integer
+
+    /* Check if a character is available in the input buffer */
+    if (tstc())
+    {
+        /* Retrieve the key from the input buffer */
+        int32_t key = getchar();
+
+        /* Return the key value */
+        m3ApiReturn(key);
+    }
+
+    /* Return -1 if no key is pressed */
+    m3ApiReturn(-1);
+}
+
+/*
+ * Retrieve the current system time in milliseconds.
+ *
+ * This function utilizes the `get_timer()` API to obtain the current
+ * timer value, measured relative to system start or reset. The result
+ * is returned as a 64-bit integer, ensuring compatibility with large
+ * time values.
+ */
+m3ApiRawFunction(env_now)
+{
+    m3ApiReturnType(int64_t); // Declare the return type as a 64-bit integer
+
+    /* Fetch the current timer value in milliseconds (relative to '0') */
+    int64_t now = get_timer(0);
+
+    /* Return the retrieved time */
+    m3ApiReturn(now);
+}
+
+/* Current network interface */
+struct netif *current_netif = NULL;
+
+/*
+ * Maximum number of network sockets that can be tracked simultaneously.
+ */
+#define MAX_NETWORK_SOCKETS 64
+
+/* Timeout for a connection attempt in milliseconds */
+#define CONNECTION_TIMEOUT_MS 4000
+
+/*
+ * Structure to track the state of a network socket.
+ */
+typedef struct NetworkSocket
+{
+    struct tcp_pcb *pcb;            // TCP protocol control block associated with the event
+    bool is_connected;              // Flag indicating whether the socket is connected
+    uint64_t connection_start_time; // Time when the connection was established
+    err_t err;                      // Error code (if any) for the socket
+    uint32_t bytes_sent;            // Number of sent bytes
+    uint32_t bytes_sent_acked;      // Number of sent bytes acknowledged
+    struct pbuf *recv_buffer;       // Receive buffer
+    uint32_t recv_bytes;            // Number of received bytes
+} NetworkSocket;
+
+/*
+ * Array to store active network sockets.
+ */
+static NetworkSocket network_sockets[MAX_NETWORK_SOCKETS];
+
+static void tcp_err_callback(void *arg, err_t err)
+{
+    printf("tcp_err_callback: %d\n", err);
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb == (struct tcp_pcb *)arg)
+        {
+            network_sockets[i].err = err;
+        }
+    }
+}
+
+static err_t tcp_sent_callback(void *arg, struct tcp_pcb *pcb, u16_t len)
+{
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb != pcb)
+            continue;
+
+        network_sockets[i].bytes_sent_acked += len;
+        break;
+    }
+
+    return ERR_OK;
+}
+
+static err_t tcp_recv_callback(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
+{
+    printf("tcp_recv_callback: %d\n", err);
+    if (p != NULL)
+    {
+        printf("tcp_recv_callback: p->len=%d\n", p->len);
+    }
+    
+    if (err != ERR_OK)
+    {
+        printf("tcp_recv_callback error: %d\n", err);
+        return err;
+    }
+
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb != (struct tcp_pcb *)arg)
+            continue;
+
+        if (network_sockets[i].recv_buffer != NULL)
+        {
+            pbuf_cat(network_sockets[i].recv_buffer, p);
+        }
+        else
+        {
+            network_sockets[i].recv_buffer = p;
+        }
+
+        break;
+    }
+
+    return ERR_OK;
+}
+
+static void teardown_network(void)
+{
+    if (current_netif != NULL)
+    {
+        net_lwip_remove_netif(current_netif);
+        current_netif = NULL;
+    }
+}
+
+static err_t get_socket_connection_error(uint64_t socket)
+{
+
+    if (socket == 0)
+    {
+        return ERR_ARG;
+    }
+
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb != (struct tcp_pcb *)socket)
+            continue;
+
+        if (network_sockets[i].is_connected == false)
+        {
+            return ERR_CONN;
+        }
+
+        if (network_sockets[i].err != ERR_OK)
+        {
+            return network_sockets[i].err;
+        }
+
+        return ERR_OK;
+    }
+
+    return ERR_VAL;
+}
+
+/*
+ * Setup the network environment and initialize the network interface.
+ * This function ensures that the network is properly configured before use.
+ */
+m3ApiRawFunction(env_setup_network)
+{
+    m3ApiReturnType(int32_t); // Declare the return type as 32-bit integer
+    int32_t ret = 0;          // Default return value indicating success
+
+    /* Reset the network state */
+    teardown_network();
+
+    /* Set the current Ethernet device */
+    eth_set_current();
+
+    /* Retrieve the current Ethernet device */
+    struct udevice *udev = eth_get_dev();
+    if (!udev)
+    {
+        /* If no valid device is found, return an error */
+        m3ApiReturn(-1);
+    }
+
+    /* Create a new network interface for the device */
+    current_netif = net_lwip_new_netif(udev);
+    if (current_netif == NULL)
+    {
+        /* If network interface creation fails, return an error */
+        m3ApiReturn(-1);
+    }
+
+    /* Return success */
+    m3ApiReturn(ret);
+}
+
+m3ApiRawFunction(env_teardown_network)
+{
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb == NULL)
+            continue;
+
+        if (network_sockets[i].pcb->state != CLOSED)
+            tcp_abort(network_sockets[i].pcb);
+        
+        if (network_sockets[i].recv_buffer != NULL)
+            pbuf_free(network_sockets[i].recv_buffer);
+
+        network_sockets[i] = (NetworkSocket){0};
+    }
+
+    teardown_network();
+    m3ApiSuccess();
+}
+
+m3ApiRawFunction(env_lwip_rx)
+{
+    m3ApiReturnType(int32_t); // Declare the return type as 32-bit integer
+
+    if (current_netif == NULL)
+        m3ApiReturn(-1);
+
+    int result = net_lwip_rx(eth_get_dev(), current_netif);
+    sys_check_timeouts();
+    m3ApiReturn(result);
+}
+
+/*
+ * Create a new TCP socket.
+ * This function initializes a new TCP protocol control block (PCB) and returns
+ * a handle to the newly created socket. If the socket cannot be created, a
+ * zero value is returned.
+ */
+m3ApiRawFunction(env_socket_create)
+{
+    m3ApiReturnType(uint64_t); // Declare the return type as 64-bit unsigned integer
+
+    if (current_netif == NULL)
+        m3ApiReturn(0);
+
+    /* Attempt to create a new TCP PCB */
+    struct tcp_pcb *socket = tcp_new();
+
+    if (socket != NULL)
+    {
+        tcp_arg(socket, socket);
+        tcp_err(socket, tcp_err_callback);
+        tcp_sent(socket, tcp_sent_callback);
+        tcp_recv(socket, tcp_recv_callback);
+    }
+
+    /* Return the handle to the newly created socket */
+    m3ApiReturn((uint64_t)socket);
+}
+
+/*
+ * Close a TCP socket.
+ * This function attempts to close the specified TCP socket. If the socket cannot
+ * be closed, an error code is returned. On success, zero is returned.
+ */
+m3ApiRawFunction(env_socket_close)
 {
+    m3ApiReturnType(int32_t);      // Declare the return type as 32-bit integer
+    m3ApiGetArg(uint64_t, socket); // Retrieve the socket handle from the arguments
+
+    /* Iterate through the network sockets array to find the matching socket */
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb != (struct tcp_pcb *)socket)
+            continue;
+
+        if (network_sockets[i].recv_buffer != NULL)
+        {
+            pbuf_free(network_sockets[i].recv_buffer);
+            network_sockets[i].recv_buffer = NULL;
+        }
+
+        /* Clear the socket state */
+        network_sockets[i] = (NetworkSocket){0};
+        break;
+    }
+
+    /* Attempt to close the specified socket */
+    err_t err = tcp_close((struct tcp_pcb *)socket);
+
+    /* Verify if the socket was successfully closed */
+    if (err != ERR_OK)
+    {
+        /* Return an error code if the socket could not be closed */
+        m3ApiReturn(err);
+    }
+
+    /* Return success */
+    m3ApiReturn(0);
+}
+
+/*
+ * Callback function invoked when a TCP connection attempt completes.
+ */
+static err_t tcp_connect_callback(void *arg, struct tcp_pcb *pcb, err_t error)
+{
+    printf("tcp_connect_callback: %d\n", error);
+    /* Iterate through the network sockets array to find the matching PCB */
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb == arg)
+        {
+            /* Update the sockets with the result of the connection attempt */
+            network_sockets[i].is_connected = (error == ERR_OK);
+            network_sockets[i].err = error;
+            break;
+        }
+    }
+
+    return ERR_OK;
+}
+
+/*
+ * Connect a TCP socket to a remote address and port.
+ * This function initiates a TCP connection to the specified address and port.
+ * The result of the connection attempt can be checked using env_socket_poll.
+ */
+m3ApiRawFunction(env_socket_connect)
+{
+    m3ApiReturnType(int32_t); // Declare the return type as 32-bit integer
+    m3ApiGetArg(uint64_t, socket);
+    m3ApiGetArg(uint32_t, addr); //  Retrieve the IP address from big endian to network byte order
+    m3ApiGetArg(uint32_t, port); // Retrieve the port number from the arguments
+
+    /* Find an available slot in the network I/O events array */
+    bool slot_found = false;
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb != NULL)
+            continue;
+
+        /* Ensure the socket is not already being tracked */
+        if (network_sockets[i].pcb == (struct tcp_pcb *)socket)
+            m3ApiReturn(ERR_VAL);
+
+        /* Assign the socket to the slot */
+        network_sockets[i].pcb = (struct tcp_pcb *)socket;
+        network_sockets[i].is_connected = false;
+        network_sockets[i].connection_start_time = get_timer(0);
+        network_sockets[i].err = ERR_OK;
+        slot_found = true;
+        break;
+    }
+
+    /* Return an error if no slot is available */
+    if (!slot_found)
+    {
+        m3ApiReturn(ERR_MEM);
+    }
+
+    /* Attempt to establish the TCP connection */
+    ip_addr_t ip_addr = {.addr = addr};
+    err_t error = tcp_connect((struct tcp_pcb *)socket, &ip_addr, port, tcp_connect_callback);
+
+    /* Return an error if the connection attempt fails immediately */
+    if (error != ERR_OK)
+    {
+        m3ApiReturn(error);
+    }
+
+    /* Return success to indicate the connection attempt is in progress */
+    m3ApiReturn(0);
+}
+
+/*
+ * Check the status of a TCP socket.
+ */
+m3ApiRawFunction(env_socket_check_connection)
+{
+    m3ApiReturnType(int32_t);      // Declare the return type as 32-bit integer
+    m3ApiGetArg(uint64_t, socket); // Retrieve the socket handle from the arguments
+
+    /* Iterate through the network sockets array to find the matching socket */
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb != (struct tcp_pcb *)socket)
+            continue;
+
+        /* Return the result if the connection attempt has completed */
+        if (network_sockets[i].is_connected)
+        {
+            m3ApiReturn(ERR_OK);
+        }
+
+        /* Return the error code if the connection attempt failed */
+        if (network_sockets[i].err != ERR_OK)
+            m3ApiReturn(network_sockets[i].err);
+
+        /* Return the error code if the connection attempt timed out */
+        if (get_timer(0) - network_sockets[i].connection_start_time > CONNECTION_TIMEOUT_MS)
+            m3ApiReturn(ERR_TIMEOUT);
+
+        /* Return a special code to indicate the operation is still in progress */
+        m3ApiReturn(ERR_INPROGRESS);
+    }
+
+    /* Return an error if the socket is not being tracked */
+    m3ApiReturn(ERR_VAL);
+}
+
+m3ApiRawFunction(env_max_sockets)
+{
+    m3ApiReturnType(int32_t);
+    m3ApiReturn(MAX_NETWORK_SOCKETS);
+}
+
+m3ApiRawFunction(env_used_sockets)
+{
+    m3ApiReturnType(int32_t);
+    int num_sockets = 0;
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb != NULL)
+        {
+            num_sockets++;
+        }
+    }
+
+    m3ApiReturn(num_sockets);
+}
+
+m3ApiRawFunction(env_socket_write)
+{
+    m3ApiReturnType(int32_t);
+    m3ApiGetArg(uint64_t, socket);
+    m3ApiGetArgMem(void *, buf);
+    m3ApiGetArg(uint32_t, len);
+    m3ApiCheckMem(buf, len);
+
+    err_t socket_err = get_socket_connection_error(socket);
+
+    if (socket_err != ERR_OK)
+    {
+        m3ApiReturn(socket_err);
+    }
+
+    uint16_t available_sndbuf = tcp_sndbuf((struct tcp_pcb *)socket);
+    if (len > available_sndbuf)
+    {
+        m3ApiReturn(ERR_MEM);
+    }
+
+    err_t err = tcp_write((struct tcp_pcb *)socket, (void *)buf, len, TCP_WRITE_FLAG_COPY);
+    if (err != ERR_OK)
+    {
+        m3ApiReturn(err);
+    }
+
+    err = tcp_output((struct tcp_pcb *)socket);
+    if (err != ERR_OK)
+    {
+        m3ApiReturn(err);
+    }
+
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb == (struct tcp_pcb *)socket)
+        {
+            network_sockets[i].bytes_sent += len;
+            break;
+        }
+    }
+
+    m3ApiReturn(ERR_OK);
+}
+
+m3ApiRawFunction(env_socket_all_writes_acked)
+{
+    m3ApiReturnType(int32_t);
+    m3ApiGetArg(uint64_t, socket);
+    struct tcp_pcb *pcb = (struct tcp_pcb *)socket;
+
+    err_t socket_err = get_socket_connection_error(socket);
+
+    if (socket_err != ERR_OK)
+    {
+        m3ApiReturn(socket_err);
+    }
+
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb == pcb)
+        {
+            bool sent_all = network_sockets[i].bytes_sent == network_sockets[i].bytes_sent_acked;
+            if (sent_all)
+            {
+                m3ApiReturn(ERR_OK);
+            }
+            else
+            {
+                m3ApiReturn(ERR_WOULDBLOCK);
+            }
+        }
+    }
+
+    m3ApiReturn(ERR_VAL);
+}
+
+m3ApiRawFunction(env_socket_read)
+{
+    m3ApiReturnType(int32_t);
+    m3ApiGetArg(uint64_t, socket);
+    m3ApiGetArgMem(void *, buf);
+    m3ApiGetArg(uint32_t, len);
+
+    err_t socket_err = get_socket_connection_error(socket);
+
+    if (socket_err != ERR_OK)
+    {
+        m3ApiReturn(socket_err);
+    }
+
+    for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
+    {
+        if (network_sockets[i].pcb != (struct tcp_pcb *)socket)
+        {
+            continue;
+        }
+        
+        struct pbuf *p = network_sockets[i].recv_buffer;
+        if (p == NULL)
+        {
+            m3ApiReturn(ERR_WOULDBLOCK);
+        }
+
+        uint16_t read_len = pbuf_copy_partial(p, buf, len, network_sockets[i].recv_bytes);
+        network_sockets[i].recv_bytes += read_len;
+
+        if (network_sockets[i].recv_bytes == p->tot_len)
+        {
+            pbuf_free(p);
+            network_sockets[i].recv_buffer = NULL;
+            network_sockets[i].recv_bytes = 0;
+        }
+
+        m3ApiReturn(read_len);
+    }
+
+    m3ApiReturn(ERR_VAL);
+}
+
+/*
+ * Execute a WebAssembly (WASM) program.
+ *
+ * This command initializes the WASM environment, parses and loads a WASM module
+ * from memory, links necessary host functions, and executes the module's main
+ * function. The result of the execution is returned to the caller.
+ *
+ * Usage:
+ *   wasm <srcaddr> <srcsize>
+ *
+ * Parameters:
+ *   srcaddr - Memory address where the WASM module is located (hexadecimal).
+ *   srcsize - Size of the WASM module in bytes (hexadecimal).
+ *
+ * Returns:
+ *   - Result of the WASM main function if successful.
+ *   - CMD_RET_USAGE (1) if usage is incorrect.
+ *   - 1 for other errors.
+ */
+static int do_wasm(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+    /* Inform the user that the WASM program is being executed */
     printf("Running WASM program...\n");
 
-    // Parse arguments
+    /* Validate the number of arguments */
     if (argc != 3)
         return CMD_RET_USAGE;
 
+    /* Parse the memory address and size arguments */
     unsigned long src_addr = hextoul(argv[1], NULL);
     unsigned long len = hextoul(argv[2], NULL);
+
+    /* Map the source address to a usable memory region */
     void *real_addr = map_sysmem(src_addr, len);
 
+    /* Initialize the WASM environment */
     M3Result result = m3Err_none;
-
     IM3Environment env = m3_NewEnvironment();
     if (!env)
     {
-        log_err("failed to create environment\n");
+        log_err("Failed to create WASM environment\n");
         return 1;
     }
 
+    /* Create a WASM runtime with 64 KiB stack space */
     IM3Runtime runtime = m3_NewRuntime(env, 64 * 1024, NULL);
     if (!runtime)
     {
-        log_err("failed to create runtime\n");
+        log_err("Failed to create WASM runtime\n");
+        m3_FreeEnvironment(env);
         return 1;
     }
 
+    /* Parse the WASM module from memory */
     IM3Module module;
     result = m3_ParseModule(env, &module, real_addr, len);
     if (result != m3Err_none)
     {
-        log_err("error parsing module: %s\n", result);
+        log_err("Error parsing WASM module: %s\n", result);
+        m3_FreeRuntime(runtime);
+        m3_FreeEnvironment(env);
         return 1;
     }
 
+    /* Load the parsed module into the runtime */
     result = m3_LoadModule(runtime, module);
     if (result != m3Err_none)
     {
-        log_err("error loading module: %s\n", result);
+        log_err("Error loading WASM module: %s\n", result);
+        m3_FreeRuntime(runtime);
+        m3_FreeEnvironment(env);
         return 1;
     }
 
-    result = m3_LinkRawFunction(module, "env", "env_print", "v(*i)", &env_print);
-    if (result != m3Err_none)
-    {
-        log_err("error linking function: %s\n", result);
-        return 1;
-    }
+    /* Link host functions required by the WASM module */
+    LINK_RAW_FUNCTION(module, "env_print", "v(*i)", &env_print);
+    LINK_RAW_FUNCTION(module, "env_key_pressed", "i()", &env_key_pressed);
+    LINK_RAW_FUNCTION(module, "env_now", "I()", &env_now);
+    LINK_RAW_FUNCTION(module, "env_setup_network", "i()", &env_setup_network);
+    LINK_RAW_FUNCTION(module, "env_teardown_network", "v()", &env_teardown_network);
+    LINK_RAW_FUNCTION(module, "env_lwip_rx", "i()", &env_lwip_rx);
+    LINK_RAW_FUNCTION(module, "env_socket_create", "I()", &env_socket_create);
+    LINK_RAW_FUNCTION(module, "env_socket_close", "i(I)", &env_socket_close);
+    LINK_RAW_FUNCTION(module, "env_socket_connect", "i(Iii)", &env_socket_connect);
+    LINK_RAW_FUNCTION(module, "env_socket_check_connection", "i(I)", &env_socket_check_connection);
+    LINK_RAW_FUNCTION(module, "env_max_sockets", "I()", &env_max_sockets);
+    LINK_RAW_FUNCTION(module, "env_used_sockets", "I()", &env_used_sockets);
+    LINK_RAW_FUNCTION(module, "env_socket_write", "i(I*i)", &env_socket_write);
+    LINK_RAW_FUNCTION(module, "env_socket_all_writes_acked", "i(I)", &env_socket_all_writes_acked);
+    LINK_RAW_FUNCTION(module, "env_socket_read", "i(I*i)", &env_socket_read);
 
+    /* Locate the "main" function within the WASM module */
     IM3Function function = NULL;
     result = m3_FindFunction(&function, runtime, "main");
     if (result != m3Err_none)
     {
-        log_err("error finding function: %s\n", result);
+        log_err("Error finding 'main' function in WASM module: %s\n", result);
+        m3_FreeRuntime(runtime);
+        m3_FreeEnvironment(env);
         return 1;
     }
 
+    /* Execute the "main" function */
     result = m3_CallV(function);
     if (result != m3Err_none)
     {
-        log_err("error calling function: %s\n", result);
+        log_err("Error calling 'main' function in WASM module: %s\n", result);
+        m3_FreeRuntime(runtime);
+        m3_FreeEnvironment(env);
         return 1;
     }
 
+    /* Retrieve the result of the "main" function */
     int32_t ret;
     m3_GetResultsV(function, &ret);
+
+    /* Clean up resources */
     m3_FreeRuntime(runtime);
     m3_FreeEnvironment(env);
+
+    /* Return the result of the WASM program's execution */
     return ret;
 }
 
-U_BOOT_CMD(wasm, 3, 1, do_wasm, "run wasm program", "srcaddr [srcsize]");
\ No newline at end of file
+/*
+ * Register the "wasm" command with U-Boot.
+ *
+ * This command runs a WebAssembly (WASM) program stored in memory.
+ * The user must specify the starting address and size of the WASM module.
+ *
+ * Usage:
+ *   wasm <srcaddr> <srcsize>
+ *
+ * Parameters:
+ *   srcaddr - Memory address where the WASM module is located (hexadecimal).
+ *   srcsize - Size of the WASM module in bytes (hexadecimal).
+ */
+U_BOOT_CMD(wasm,               /* Command name */
+           3,                  /* Maximum number of arguments */
+           1,                  /* Command is repeatable */
+           do_wasm,            /* Command handler function */
+           "run WASM program", /* Short description */
+           "srcaddr srcsize\n" /* Long description with parameters */
+           "  srcaddr - Address of the WASM module (hexadecimal)\n"
+           "  srcsize - Size of the WASM module in bytes (hexadecimal)");
diff --git a/configs/qemu-x86_wasm_defconfig b/configs/qemu-x86_wasm_defconfig
index c677f504..e811f083 100644
--- a/configs/qemu-x86_wasm_defconfig
+++ b/configs/qemu-x86_wasm_defconfig
@@ -1,6 +1,7 @@
 #include <configs/qemu-x86_defconfig>
 
 CONFIG_WASM=y
-CONFIG_BOOTCOMMAND="setenv serverip 10.0.2.2; setenv ipaddr 10.0.2.15; setenv netmask 255.255.255.0; tftpboot $loadaddr main.wasm; wasm $loadaddr $filesize" 
+
+CONFIG_BOOTCOMMAND="setenv serverip 10.0.2.2; setenv ipaddr 10.0.2.15; setenv netmask 255.255.255.0; tftpboot $loadaddr main.wasm; dhcp; wasm $loadaddr $filesize" 
 CONFIG_SYS_MALLOC_LEN=0x10000000
 SYS_MALLOC_CLEAR_ON_INIT=n
\ No newline at end of file
diff --git a/configs/qemu_arm64_wasm_defconfig b/configs/qemu_arm64_wasm_defconfig
index e1018e72..5ee0a734 100644
--- a/configs/qemu_arm64_wasm_defconfig
+++ b/configs/qemu_arm64_wasm_defconfig
@@ -1,6 +1,7 @@
 #include <configs/qemu_arm64_defconfig>
 
 CONFIG_WASM=y
-CONFIG_BOOTCOMMAND="setenv serverip 10.0.2.2; setenv ipaddr 10.0.2.15; setenv netmask 255.255.255.0; tftpboot $loadaddr main.wasm; wasm $loadaddr $filesize" 
+CONFIG_LWIP_DEBUG=n
+CONFIG_BOOTCOMMAND="setenv serverip 10.0.2.2; setenv gatewayip 10.0.2.2; setenv ipaddr 10.0.2.15; setenv netmask 255.255.255.0; tftpboot $loadaddr main.wasm; wasm $loadaddr $filesize" 
 CONFIG_SYS_MALLOC_LEN=0x10000000
-SYS_MALLOC_CLEAR_ON_INIT=n
\ No newline at end of file
+SYS_MALLOC_CLEAR_ON_INIT=n
diff --git a/include/wasm3/m3_exec.h b/include/wasm3/m3_exec.h
index dcdf370b..61bdaf2f 100644
--- a/include/wasm3/m3_exec.h
+++ b/include/wasm3/m3_exec.h
@@ -31,6 +31,7 @@
 #include "m3_exec_defs.h"
 
 #include <limits.h>
+#include <inttypes.h>
 
 d_m3BeginExternC
 
diff --git a/include/wasm3/wasm3.h b/include/wasm3/wasm3.h
index 3f6e5f0f..278067cc 100644
--- a/include/wasm3/wasm3.h
+++ b/include/wasm3/wasm3.h
@@ -14,9 +14,8 @@
 #define M3_VERSION "0.5.1"
 
 #include <stddef.h>
-#include <stdlib.h>
 #include <stdint.h>
-#include <inttypes.h>
+#include <linux/types.h>
 #include <stdarg.h>
 
 #include "wasm3_defs.h"
diff --git a/lib/lwip/lwip/src/core/tcp_out.c b/lib/lwip/lwip/src/core/tcp_out.c
index 6dbc5f96..74deeeeb 100644
--- a/lib/lwip/lwip/src/core/tcp_out.c
+++ b/lib/lwip/lwip/src/core/tcp_out.c
@@ -61,6 +61,7 @@
  */
 
 #include "lwip/opt.h"
+#include <stdio.h>
 
 #if LWIP_TCP /* don't build if not configured for use in lwipopts.h */
 
diff --git a/lib/wasm3/m3_env.c b/lib/wasm3/m3_env.c
index 9b4097ed..3606f099 100644
--- a/lib/wasm3/m3_env.c
+++ b/lib/wasm3/m3_env.c
@@ -8,12 +8,13 @@
 #include <stdarg.h>
 #include <limits.h>
 
+#include <stdlib.h>
 #include <wasm3/m3_env.h>
 #include <wasm3/m3_compile.h>
 #include <wasm3/m3_exception.h>
 #include <wasm3/m3_info.h>
 
-IM3Environment m3_NewEnvironment()
+IM3Environment m3_NewEnvironment(void)
 {
     IM3Environment env = m3_AllocStruct(M3Environment);
 
@@ -1068,23 +1069,13 @@ M3Result m3_CallArgv(IM3Function i_function, uint32_t i_argc, const char *i_argv
         switch (d_FuncArgType(ftype, i))
         {
         case c_m3Type_i32:
-            *(i32 *)(s) = strtoul(i_argv[i], NULL, 10);
+            *(i32 *)(s) = simple_strtoul(i_argv[i], NULL, 10);
             s += 8;
             break;
         case c_m3Type_i64:
-            *(i64 *)(s) = strtoull(i_argv[i], NULL, 10);
+            *(i64 *)(s) = simple_strtoull(i_argv[i], NULL, 10);
             s += 8;
             break;
-#if d_m3HasFloat
-        case c_m3Type_f32:
-            *(f32 *)(s) = strtod(i_argv[i], NULL);
-            s += 8;
-            break; // strtof would be less portable
-        case c_m3Type_f64:
-            *(f64 *)(s) = strtod(i_argv[i], NULL);
-            s += 8;
-            break;
-#endif
         default:
             return "unknown argument type";
         }
diff --git a/lib/wasm3/m3_info.c b/lib/wasm3/m3_info.c
index 706c730b..f665280a 100644
--- a/lib/wasm3/m3_info.c
+++ b/lib/wasm3/m3_info.c
@@ -8,6 +8,7 @@
 #include <wasm3/m3_env.h>
 #include <wasm3/m3_info.h>
 #include <wasm3/m3_compile.h>
+#include <inttypes.h>
 
 #if defined(DEBUG) || (d_m3EnableStrace >= 2)
 
-- 
2.39.3 (Apple Git-146)

