From 41ed53e35a03a279fc54420f4a6da456468b3d1d Mon Sep 17 00:00:00 2001
From: Mathias Gredal <mathiasgredal@icloud.com>
Date: Sun, 23 Feb 2025 23:28:03 +0100
Subject: [PATCH 12/12] Testing

---
 cmd/wasm.c                         |  2 +-
 configs/qemu-x86_64_wasm_defconfig |  2 +-
 include/wasm3/m3_config.h          |  2 +-
 include/wasm_ffi/wasm_sys.h        | 19 +++++++++++
 lib/wasm3/m3_compile.c             |  2 ++
 lib/wasm_ffi/wasm_ffi.c            | 52 ++++++++++++++++--------------
 lib/wasm_ffi/wasm_socket.c         | 23 +++++++------
 lib/wasm_ffi/wasm_sys.c            | 28 ++++++++++++++++
 8 files changed, 91 insertions(+), 39 deletions(-)

diff --git a/cmd/wasm.c b/cmd/wasm.c
index 38a3cc03..3684516c 100644
--- a/cmd/wasm.c
+++ b/cmd/wasm.c
@@ -37,7 +37,7 @@
 static int do_wasm(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
 {
     /* Inform the user that the WASM program is being executed */
-    printf("Running WASM program...\n");
+    printf("Running your WASM program...\n");
 
     /* Validate the number of arguments */
     if (argc != 3)
diff --git a/configs/qemu-x86_64_wasm_defconfig b/configs/qemu-x86_64_wasm_defconfig
index 4308e133..92daf02e 100644
--- a/configs/qemu-x86_64_wasm_defconfig
+++ b/configs/qemu-x86_64_wasm_defconfig
@@ -2,6 +2,6 @@
 
 CONFIG_WASM=y
 CONFIG_PCNET=y
-CONFIG_BOOTCOMMAND="setenv serverip 10.0.2.2; setenv ipaddr 10.0.2.15; setenv netmask 255.255.255.0; tftpboot $loadaddr main.wasm; dhcp; wasm $loadaddr $filesize" 
+CONFIG_BOOTCOMMAND="setenv serverip 10.0.2.2; setenv ipaddr 10.0.2.15; setenv netmask 255.255.255.0; dhcp; tftpboot $loadaddr main.wasm; dhcp; wasm $loadaddr $filesize" 
 CONFIG_SYS_MALLOC_LEN=0x10000000
 SYS_MALLOC_CLEAR_ON_INIT=n
\ No newline at end of file
diff --git a/include/wasm3/m3_config.h b/include/wasm3/m3_config.h
index 63f64eda..f57afbca 100644
--- a/include/wasm3/m3_config.h
+++ b/include/wasm3/m3_config.h
@@ -17,7 +17,7 @@
 #endif
 
 #ifndef d_m3MaxFunctionStackHeight
-#define d_m3MaxFunctionStackHeight 2000 * 2 // max: 32768
+#define d_m3MaxFunctionStackHeight 2000 * 8 // max: 32768
 #endif
 
 #ifndef d_m3MaxLinearMemoryPages
diff --git a/include/wasm_ffi/wasm_sys.h b/include/wasm_ffi/wasm_sys.h
index 8f13c4f5..0dd88354 100644
--- a/include/wasm_ffi/wasm_sys.h
+++ b/include/wasm_ffi/wasm_sys.h
@@ -53,4 +53,23 @@ m3ApiRawFunction(env_key_pressed);
  */
 m3ApiRawFunction(env_now);
 
+/*
+ * Retrieve random bytes from the system's random number generator.
+ *
+ * This function utilizes the `random_get()` API to obtain random bytes
+ * from the system's random number generator. The result is returned as
+ * a 32-bit integer, ensuring compatibility with large time values.
+ */
+m3ApiRawFunction(wasi_snapshot_preview1_random_get);
+
+/*
+ * Retrieve the current system time in milliseconds.
+ *
+ * This function utilizes the `clock_time_get()` API to obtain the current
+ * time value, measured relative to system start or reset. The result
+ * is returned as a 64-bit integer, ensuring compatibility with large
+ * time values.
+ */
+m3ApiRawFunction(wasi_snapshot_preview1_clock_time_get);
+
 #endif /* __WASM_SYS_H__ */
diff --git a/lib/wasm3/m3_compile.c b/lib/wasm3/m3_compile.c
index 08abf473..38105284 100644
--- a/lib/wasm3/m3_compile.c
+++ b/lib/wasm3/m3_compile.c
@@ -1706,6 +1706,8 @@ static M3Result Compile_Call(IM3Compilation o, m3opcode_t i_opcode)
             }
             else
             {
+                printf("function module not found: %s\n", GetFunctionImportModuleName(function));
+                printf("function not found: %s\n", m3_GetFunctionName(function));
                 _throw(ErrorCompile(m3Err_functionImportMissing, o, "'%s.%s'", GetFunctionImportModuleName(function), m3_GetFunctionName(function)));
             }
         }
diff --git a/lib/wasm_ffi/wasm_ffi.c b/lib/wasm_ffi/wasm_ffi.c
index ac22d183..10b9a5fe 100644
--- a/lib/wasm_ffi/wasm_ffi.c
+++ b/lib/wasm_ffi/wasm_ffi.c
@@ -8,11 +8,11 @@
 #include <wasm_ffi/wasm_net.h>
 #include <wasm_ffi/wasm_sys.h>
 
-#define LINK_RAW_FUNCTION(module, func_name, sig, func_ptr)                                                            \
+#define LINK_RAW_FUNCTION(module, env_name, func_name, sig, func_ptr)                                                            \
     do                                                                                                                 \
     {                                                                                                                  \
         /* Attempt to link the raw function */                                                                         \
-        M3Result result = m3_LinkRawFunction(module, "env", func_name, sig, func_ptr);                                 \
+        M3Result result = m3_LinkRawFunction(module, env_name, func_name, sig, func_ptr);                                 \
                                                                                                                        \
         /* Handle errors from the linking process */                                                                   \
         if (result != m3Err_none && result != m3Err_functionLookupFailed)                                              \
@@ -22,37 +22,41 @@
         }                                                                                                              \
     } while (0)
 
+
+
 bool wasm_ffi_link_all(IM3Module module)
 {
     /* Sys functions */
-    LINK_RAW_FUNCTION(module, "env_print", "v(*i)", &env_print);
-    LINK_RAW_FUNCTION(module, "env_key_pressed", "i()", &env_key_pressed);
-    LINK_RAW_FUNCTION(module, "env_now", "I()", &env_now);
+    LINK_RAW_FUNCTION(module, "env", "env_print", "v(*i)", &env_print);
+    LINK_RAW_FUNCTION(module, "env", "env_key_pressed", "i()", &env_key_pressed);
+    LINK_RAW_FUNCTION(module, "env", "env_now", "I()", &env_now);
+    LINK_RAW_FUNCTION(module, "wasi_snapshot_preview1", "random_get", "i(*i)", &wasi_snapshot_preview1_random_get);
+    LINK_RAW_FUNCTION(module, "wasi_snapshot_preview1", "clock_time_get", "i(iI*)", &wasi_snapshot_preview1_clock_time_get);
 
     /* Network functions */
-    LINK_RAW_FUNCTION(module, "env_net_setup", "i()", &net_setup);
-    LINK_RAW_FUNCTION(module, "env_net_teardown", "i()", &net_teardown);
-    LINK_RAW_FUNCTION(module, "env_net_rx", "i()", &net_rx);
+    LINK_RAW_FUNCTION(module, "env", "env_net_setup", "i()", &net_setup);
+    LINK_RAW_FUNCTION(module, "env", "env_net_teardown", "i()", &net_teardown);
+    LINK_RAW_FUNCTION(module, "env", "env_net_rx", "i()", &net_rx);
 
 
     /* DNS functions */
-    LINK_RAW_FUNCTION(module, "env_net_dns_set_server", "v(i)", &net_dns_set_server_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_dns_lookup", "i(*i)", &net_dns_lookup_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_dns_lookup_poll", "i()", &net_dns_lookup_poll_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_dns_lookup_result", "i()", &net_dns_lookup_result_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_dns_set_server", "v(i)", &net_dns_set_server_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_dns_lookup", "i(*i)", &net_dns_lookup_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_dns_lookup_poll", "i()", &net_dns_lookup_poll_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_dns_lookup_result", "i()", &net_dns_lookup_result_ffi);
 
     /* Socket functions */
-    LINK_RAW_FUNCTION(module, "env_net_socket_new_tcp", "i()", &net_socket_new_tcp_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_new_udp", "i()", &net_socket_new_udp_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_free", "i(i)", &net_socket_free_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_connect", "i(iii)", &net_socket_connect_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_connect_poll", "i(i)", &net_socket_connect_poll_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_bind", "i(iii)", &net_socket_bind_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_listen", "i(ii)", &net_socket_listen_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_accept", "i(i)", &net_socket_accept_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_accept_poll", "i(i)", &net_socket_accept_poll_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_read", "i(i*i)", &net_socket_read_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_write", "i(i*i)", &net_socket_write_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_write_poll", "i(i)", &net_socket_write_poll_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_new_tcp", "i()", &net_socket_new_tcp_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_new_udp", "i()", &net_socket_new_udp_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_free", "i(i)", &net_socket_free_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_connect", "i(iii)", &net_socket_connect_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_connect_poll", "i(i)", &net_socket_connect_poll_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_bind", "i(iii)", &net_socket_bind_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_listen", "i(ii)", &net_socket_listen_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_accept", "i(i)", &net_socket_accept_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_accept_poll", "i(i)", &net_socket_accept_poll_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_read", "i(i*i)", &net_socket_read_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_write", "i(i*i)", &net_socket_write_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_write_poll", "i(i)", &net_socket_write_poll_ffi);
     return 0;
 }
\ No newline at end of file
diff --git a/lib/wasm_ffi/wasm_socket.c b/lib/wasm_ffi/wasm_socket.c
index 1d006705..8baf1894 100644
--- a/lib/wasm_ffi/wasm_socket.c
+++ b/lib/wasm_ffi/wasm_socket.c
@@ -84,8 +84,6 @@ static err_t tcp_recv_callback(void *arg, struct tcp_pcb *pcb, struct pbuf *p, e
 {
     int8_t index = (int8_t)(uintptr_t)arg;
 
-    // printf("tcp_recv_callback: index = %d, err = %d, len = %d\n", index, err, p->tot_len);
-
     /* Get the socket */
     net_socket_t *sock = net_socket_get(index);
     if (!sock)
@@ -105,6 +103,7 @@ static err_t tcp_recv_callback(void *arg, struct tcp_pcb *pcb, struct pbuf *p, e
 
     return ERR_OK;
 }
+
 static err_t tcp_connect_callback(void *arg, struct tcp_pcb *pcb, err_t err)
 {
     int8_t index = (int8_t)(uintptr_t)arg;
@@ -156,7 +155,7 @@ static err_t tcp_accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err)
     }
 
     /* Set the connection socket */
-    net_context_t* net_ctx = net_context_get();
+    net_context_t *net_ctx = net_context_get();
     memset(&net_ctx->sockets[client_index], 0, sizeof(net_socket_t));
     net_ctx->sockets[client_index].type = CONN_TCP;
     net_ctx->sockets[client_index].pcb.tcp = newpcb;
@@ -212,7 +211,7 @@ err_t net_socket_new(enum conn_type_t conn_type)
     }
 
     /* Initialize socket structure */
-    net_context_t* net_ctx = net_context_get();
+    net_context_t *net_ctx = net_context_get();
     memset(&net_ctx->sockets[index], 0, sizeof(net_socket_t));
     net_ctx->sockets[index].type = conn_type;
 
@@ -262,7 +261,7 @@ net_socket_t *net_socket_get(int8_t index)
     }
 
     /* Return NULL if socket is not active */
-    net_context_t* net_ctx = net_context_get();
+    net_context_t *net_ctx = net_context_get();
     if (!(net_ctx->active_connection_bitfield & (1ULL << index)))
     {
         return NULL;
@@ -322,7 +321,7 @@ err_t net_socket_free(int8_t index)
     memset(sock, 0, sizeof(net_socket_t));
 
     /* Mark socket as inactive */
-    net_context_t* net_ctx = net_context_get();
+    net_context_t *net_ctx = net_context_get();
     net_ctx->active_connection_bitfield &= ~(1ULL << index);
 
     return ERR_OK;
@@ -521,7 +520,7 @@ err_t net_socket_accept_poll(int8_t index)
     }
 
     /* Find the newly created accept socket */
-    net_context_t* net_ctx = net_context_get();
+    net_context_t *net_ctx = net_context_get();
     net_socket_t *accept_sock = NULL;
     int accept_sock_index = -1;
     for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
@@ -572,17 +571,17 @@ err_t net_socket_read(int8_t index, void *buffer, uint32_t length)
     uint16_t read_len = pbuf_copy_partial(p, buffer, length, sock->recv_bytes);
     sock->recv_bytes += read_len;
 
-    if (sock->type == CONN_TCP)
-    {
-        tcp_recved(sock->pcb.tcp, read_len);
-    }
-
     /* If we've read all data, free the buffer */
     if (sock->recv_bytes == p->tot_len)
     {
         pbuf_free(p);
         sock->recv_buffer = NULL;
         sock->recv_bytes = 0;
+
+        if (sock->type == CONN_TCP)
+        {
+            tcp_recved(sock->pcb.tcp, p->tot_len);
+        }
     }
 
     return read_len;
diff --git a/lib/wasm_ffi/wasm_sys.c b/lib/wasm_ffi/wasm_sys.c
index 46f4aefc..ae36de69 100644
--- a/lib/wasm_ffi/wasm_sys.c
+++ b/lib/wasm_ffi/wasm_sys.c
@@ -3,6 +3,7 @@
  * Copyright (C) 2025, Mathias Gredal, mathiasgredal@icloud.com.
  */
 
+#include "wasm3/wasm3.h"
 #include <stdio.h>
 #include <time.h>
 #include <wasm_ffi/wasm_sys.h>
@@ -52,4 +53,31 @@ m3ApiRawFunction(env_now)
 
     /* Return the retrieved time */
     m3ApiReturn(now);
+}
+
+m3ApiRawFunction(wasi_snapshot_preview1_random_get) {
+    m3ApiReturnType(int32_t);
+    m3ApiGetArgMem(void *, buf);
+    m3ApiGetArg(uint32_t, buf_len);
+    // TODO: implement proper randomness
+    static int x = 1234;
+    for (int i = 0; i < buf_len; i++) {
+        x += 0x6D2B79F5UL;
+        uint32_t z = (x += 0x6D2B79F5UL);
+        z = (z ^ (z >> 15)) * (z | 1UL);
+        z ^= z + (z ^ (z >> 7)) * (z | 61UL);
+        ((uint8_t *)buf)[i] = z ^ (z >> 14);
+    }
+    m3ApiReturn(0);
+}
+
+m3ApiRawFunction(wasi_snapshot_preview1_clock_time_get) {
+    m3ApiReturnType  (uint32_t);
+    m3ApiGetArg      (uint32_t   , wasi_clk_id);
+    m3ApiGetArg      (uint64_t   , precision);
+    m3ApiGetArgMem   (uint64_t * , time);
+
+    *time = get_timer(0);
+
+    m3ApiReturn(0);
 }
\ No newline at end of file
-- 
2.39.3 (Apple Git-146)

