From 334944b29472c24fb881be5d8750536a8e1a7bb1 Mon Sep 17 00:00:00 2001
From: Mathias Gredal <mathiasgredal@icloud.com>
Date: Thu, 20 Mar 2025 03:01:21 +0100
Subject: [PATCH 13/13] Testing

---
 include/wasm_ffi/wasm_sys.h | 14 ++++++++
 lib/wasm_ffi/wasm_ffi.c     |  4 +++
 lib/wasm_ffi/wasm_socket.c  |  2 --
 lib/wasm_ffi/wasm_sys.c     | 65 +++++++++++++++++++++++++++++++++++++
 4 files changed, 83 insertions(+), 2 deletions(-)

diff --git a/include/wasm_ffi/wasm_sys.h b/include/wasm_ffi/wasm_sys.h
index 9eab28e4..75a5b54b 100644
--- a/include/wasm_ffi/wasm_sys.h
+++ b/include/wasm_ffi/wasm_sys.h
@@ -70,6 +70,20 @@ m3ApiRawFunction(env_memcpy);
  */
 m3ApiRawFunction(env_set_wasm_chainload);
 
+/*
+ * Retrieve an environment variable from the system.
+ *
+ * This function retrieves an environment variable from the system.
+ */
+m3ApiRawFunction(env_get_env);
+
+/*
+ * Execute a command from the WebAssembly (WASM) environment.
+ *
+ * This function executes a command from the WebAssembly (WASM) environment.
+ */
+m3ApiRawFunction(env_execute_cmd);
+
 /*
  * Retrieve random bytes from the system's random number generator.
  *
diff --git a/lib/wasm_ffi/wasm_ffi.c b/lib/wasm_ffi/wasm_ffi.c
index e72d99f7..d05d1d11 100644
--- a/lib/wasm_ffi/wasm_ffi.c
+++ b/lib/wasm_ffi/wasm_ffi.c
@@ -36,6 +36,10 @@ bool wasm_ffi_link_all(IM3Module module)
     LINK_RAW_FUNCTION(module, "wasi_snapshot_preview1", "clock_time_get", "i(iI*)",
                       &wasi_snapshot_preview1_clock_time_get);
     LINK_RAW_FUNCTION(module, "wasi_snapshot_preview1", "sched_yield", "i()", &wasi_snapshot_preview1_sched_yield);
+    LINK_RAW_FUNCTION(module, "env", "env_execute_cmd", "i(*i)", &env_execute_cmd);
+
+    /* Environment functions */
+    LINK_RAW_FUNCTION(module, "env", "env_get_env", "i(*i*i)", &env_get_env);
 
     /* Network functions */
     LINK_RAW_FUNCTION(module, "env", "env_net_setup", "i()", &net_setup);
diff --git a/lib/wasm_ffi/wasm_socket.c b/lib/wasm_ffi/wasm_socket.c
index 4072ba26..e41bbe68 100644
--- a/lib/wasm_ffi/wasm_socket.c
+++ b/lib/wasm_ffi/wasm_socket.c
@@ -579,8 +579,6 @@ err_t net_socket_read(int8_t index, void *buffer, uint32_t length)
     uint16_t read_len = pbuf_copy_partial(p, buffer, length, sock->recv_bytes);
     sock->recv_bytes += read_len;
 
-    // printf("net_socket_read: read_len = %d, sock->recv_bytes = %d\n", read_len, sock->recv_bytes);
-
     /* If we've read all data, free the buffer */
     if (sock->recv_bytes == p->tot_len)
     {
diff --git a/lib/wasm_ffi/wasm_sys.c b/lib/wasm_ffi/wasm_sys.c
index 32e0b018..2d20f109 100644
--- a/lib/wasm_ffi/wasm_sys.c
+++ b/lib/wasm_ffi/wasm_sys.c
@@ -3,10 +3,14 @@
  * Copyright (C) 2025, Mathias Gredal, mathiasgredal@icloud.com.
  */
 
+#include "command.h"
+#include "env.h"
+#include "lwip/err.h"
 #include "wasm3/wasm3.h"
 #include <stdint.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 #include <time.h>
 #include <wasm_ffi/wasm_sys.h>
 
@@ -116,6 +120,67 @@ m3ApiRawFunction(env_set_wasm_chainload)
     m3ApiSuccess();
 }
 
+m3ApiRawFunction(env_get_env)
+{
+    m3ApiReturnType(int32_t);
+    m3ApiGetArgMem(const void *, key);
+    m3ApiGetArg(uint32_t, key_len);
+    m3ApiGetArgMem(char *, value);
+    m3ApiGetArg(uint32_t, value_len);
+
+    // Validate inputs
+    if (!key || key_len == 0 || !value || value_len == 0)
+    {
+        m3ApiReturn(ERR_ARG);
+    }
+
+    // Create null-terminated copy of key
+    char *checked_key = malloc(key_len + 1);
+    if (!checked_key)
+    {
+        m3ApiReturn(ERR_MEM);
+    }
+
+    memcpy(checked_key, key, key_len);
+    checked_key[key_len] = '\0';
+
+    // Get environment variable
+    char *output_value_ptr = env_get(checked_key);
+    free(checked_key);
+
+    if (!output_value_ptr)
+    {
+        m3ApiReturn(ERR_ARG);
+    }
+
+    // Copy value to output buffer
+    size_t output_value_len = strlen(output_value_ptr);
+    if (output_value_len >= value_len)
+    {
+        m3ApiReturn(ERR_BUF);
+    }
+
+    strcpy(value, output_value_ptr);
+
+    // Return success
+    m3ApiReturn(output_value_len);
+}
+
+m3ApiRawFunction(env_execute_cmd)
+{
+    m3ApiReturnType(int32_t);
+    m3ApiGetArgMem(const void *, cmd);
+    m3ApiGetArg(uint32_t, len);
+
+    char *cmd_str = malloc(len + 1);
+    memcpy(cmd_str, cmd, len);
+    cmd_str[len] = '\0';
+
+    int result = run_command(cmd_str, 0);
+    free(cmd_str);
+    m3ApiReturn(result);
+}
+
 m3ApiRawFunction(wasi_snapshot_preview1_random_get)
 {
     m3ApiReturnType(int32_t);
-- 
2.39.3 (Apple Git-146)

