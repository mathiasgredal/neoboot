From 7282dcf7e7ee7017bdbc3f3c2be2a87096ed9180 Mon Sep 17 00:00:00 2001
From: Mathias Gredal <mathiasgredal@icloud.com>
Date: Sun, 23 Feb 2025 23:28:03 +0100
Subject: [PATCH 12/13] Chain loading

---
 cmd/wasm.c                         | 192 +++++++++++++++++++----------
 configs/qemu-x86_64_wasm_defconfig |   2 +-
 include/wasm3/m3_config.h          |   2 +-
 include/wasm_ffi/wasm_ffi.h        |   3 +-
 include/wasm_ffi/wasm_sys.h        |  77 +++++++++---
 lib/wasm3/m3_compile.c             |   2 +
 lib/wasm_ffi/wasm_ffi.c            |  59 +++++----
 lib/wasm_ffi/wasm_socket.c         |  31 +++--
 lib/wasm_ffi/wasm_sys.c            | 100 ++++++++++++++-
 9 files changed, 342 insertions(+), 126 deletions(-)

diff --git a/cmd/wasm.c b/cmd/wasm.c
index 38a3cc03..507c43f8 100644
--- a/cmd/wasm.c
+++ b/cmd/wasm.c
@@ -3,55 +3,39 @@
  * Copyright (C) 2025, Mathias Gredal, mathiasgredal@icloud.com.
  */
 
-
 #include <command.h>
 #include <fs.h>
 #include <log.h>
 #include <mapmem.h>
+#include <u-boot/sha256.h>
 #include <vsprintf.h>
-#include <wasm3/wasm3.h>
-#include <wasm_ffi/wasm_ffi.h>
 #include <wasm3/m3_env.h>
 #include <wasm3/m3_exception.h>
 #include <wasm3/m3_info.h>
+#include <wasm3/wasm3.h>
+#include <wasm_ffi/wasm_ffi.h>
+#include <wasm_ffi/wasm_sys.h>
 
 /*
- * Execute a WebAssembly (WASM) program.
- *
- * This command initializes the WASM environment, parses and loads a WASM module
- * from memory, links necessary host functions, and executes the module's main
- * function. The result of the execution is returned to the caller.
+ * Execute WebAssembly module in memory
  *
- * Usage:
- *   wasm <srcaddr> <srcsize>
+ * Load, link and run a WASM module from memory buffer.
+ * We expect the module to contain a 'main' function.
  *
- * Parameters:
- *   srcaddr - Memory address where the WASM module is located (hexadecimal).
- *   srcsize - Size of the WASM module in bytes (hexadecimal).
- *
- * Returns:
- *   - Result of the WASM main function if successful.
- *   - CMD_RET_USAGE (1) if usage is incorrect.
- *   - 1 for other errors.
+ * @param env      WASM environment
+ * @param runtime  Runtime context
+ * @param wasm     Pointer to WASM binary data
+ * @param len      Length of WASM binary in bytes
+ * @return         true if successful, false on error
  */
-static int do_wasm(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+static bool run_wasm_module(void *wasm, unsigned long len)
 {
-    /* Inform the user that the WASM program is being executed */
-    printf("Running WASM program...\n");
-
-    /* Validate the number of arguments */
-    if (argc != 3)
-        return CMD_RET_USAGE;
-
-    /* Parse the memory address and size arguments */
-    unsigned long src_addr = hextoul(argv[1], NULL);
-    unsigned long len = hextoul(argv[2], NULL);
-
-    /* Map the source address to a usable memory region */
-    void *real_addr = map_sysmem(src_addr, len);
+    M3Result result = m3Err_none;
+    IM3Module module = NULL;
+    IM3Function func = NULL;
+    int32_t ret_val = 0;
 
     /* Initialize the WASM environment */
-    M3Result result = m3Err_none;
     IM3Environment env = m3_NewEnvironment();
     if (!env)
     {
@@ -68,68 +52,140 @@ static int do_wasm(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[]
         return 1;
     }
 
-    /* Parse the WASM module from memory */
-    IM3Module module;
-    result = m3_ParseModule(env, &module, real_addr, len);
-    if (result != m3Err_none)
+    /* Parse module binary - required before loading */
+    result = m3_ParseModule(env, &module, wasm, len);
+    if (result)
     {
-        log_err("Error parsing WASM module: %s\n", result);
-        m3_FreeRuntime(runtime);
+        log_err("WASM parse error: %s\n", result);
         m3_FreeEnvironment(env);
-        return 1;
+        m3_FreeRuntime(runtime);
+        return false;
     }
 
-    /* Load the parsed module into the runtime */
+    /* Load module into runtime environment */
     result = m3_LoadModule(runtime, module);
-    if (result != m3Err_none)
+    if (result)
     {
-        log_err("Error loading WASM module: %s\n", result);
-        m3_FreeRuntime(runtime);
+        log_err("WASM load error: %s\n", result);
         m3_FreeEnvironment(env);
-        return 1;
+        m3_FreeRuntime(runtime);
+        return false;
     }
 
-    /* Link host functions required by the WASM module */
-    bool error = wasm_ffi_link_all(module);
-    if (error)
+    /* Link required host functions */
+    if (wasm_ffi_link_all(module))
     {
-        log_err("Error linking host functions\n");
-        m3_FreeRuntime(runtime);
+        log_err("WASM linking failed\n");
         m3_FreeEnvironment(env);
-        return 1;
+        m3_FreeRuntime(runtime);
+        return false;
     }
 
-    /* Locate the "main" function within the WASM module */
-    IM3Function function = NULL;
-    result = m3_FindFunction(&function, runtime, "main");
+    /* Locate main entry point */
+    result = m3_FindFunction(&func, runtime, "main");
     if (result != m3Err_none)
     {
-        log_err("Error finding 'main' function in WASM module: %s\n", result);
-        m3_FreeRuntime(runtime);
+        log_err("WASM main() not found: %s\n", result);
         m3_FreeEnvironment(env);
-        return 1;
+        m3_FreeRuntime(runtime);
+        return false;
     }
 
-    /* Execute the "main" function */
-    result = m3_CallV(function);
+    /* Execute main function */
+    result = m3_CallV(func);
     if (result != m3Err_none)
     {
-        log_err("Error calling 'main' function in WASM module: %s\n", result);
-        m3_FreeRuntime(runtime);
+        log_err("WASM execution failed: %s\n", result);
         m3_FreeEnvironment(env);
-        return 1;
+        m3_FreeRuntime(runtime);
+        return false;
     }
 
-    /* Retrieve the result of the "main" function */
-    int32_t ret;
-    m3_GetResultsV(function, &ret);
+    /* Get return value */
+    result = m3_GetResultsV(func, &ret_val);
+    if (result)
+    {
+        log_err("WASM result error: %s\n", result);
+        m3_FreeEnvironment(env);
+        m3_FreeRuntime(runtime);
+        return false;
+    }
 
-    /* Clean up resources */
-    m3_FreeRuntime(runtime);
+    /* All steps completed successfully */
     m3_FreeEnvironment(env);
+    m3_FreeRuntime(runtime);
+    return true;
+}
+
+/*
+ * Run a WebAssembly (WASM) program.
+ *
+ * This command initializes the WASM environment, parses and loads a WASM module
+ * from memory, links necessary host functions, and executes the module's main
+ * function. The result of the execution is returned to the caller.
+ *
+ * Usage:
+ *   wasm <srcaddr> <srcsize>
+ *
+ * Parameters:
+ *   srcaddr - Memory address where the WASM module is located (hexadecimal).
+ *   srcsize - Size of the WASM module in bytes (hexadecimal).
+ *
+ * Returns:
+ *   - Result of the WASM main function if successful.
+ *   - CMD_RET_USAGE (1) if usage is incorrect.
+ *   - 1 for other errors.
+ */
+static int do_wasm(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+    /* Inform the user that the WASM program is being executed */
+    printf("Running your WASM program...\n");
+
+    /* Validate the number of arguments */
+    if (argc != 3)
+        return CMD_RET_USAGE;
+
+    /* Parse the memory address and size arguments */
+    unsigned long src_addr = hextoul(argv[1], NULL);
+    unsigned long len = hextoul(argv[2], NULL);
+
+    int ret_code = 0;
+
+    while (true)
+    {
+        /* Map the source address to a usable memory region */
+        void *real_addr = map_sysmem(src_addr, len);
+
+        /* Run the WASM module and get results */
+        if (!run_wasm_module(real_addr, len))
+        {
+            log_err("WASM execution errored\n");
+            ret_code = 1;
+            break;
+        }
+
+        /* Check if a chainload was requested */
+        if (get_wasm_chainload_src_addr() != 0 && get_wasm_chainload_src_len() != 0)
+        {
+            /* Get the new source address and length */
+            src_addr = get_wasm_chainload_src_addr();
+            len = get_wasm_chainload_src_len();
+
+            /* Clear the chainload request */
+            set_wasm_chainload_src_addr(0);
+            set_wasm_chainload_src_len(0);
+
+            /* Unmap the previous memory region */
+            unmap_sysmem(real_addr);
+
+            continue;
+        }
+
+        break;
+    }
 
     /* Return the result of the WASM program's execution */
-    return ret;
+    return ret_code;
 }
 
 /*
diff --git a/configs/qemu-x86_64_wasm_defconfig b/configs/qemu-x86_64_wasm_defconfig
index 4308e133..92daf02e 100644
--- a/configs/qemu-x86_64_wasm_defconfig
+++ b/configs/qemu-x86_64_wasm_defconfig
@@ -2,6 +2,6 @@
 
 CONFIG_WASM=y
 CONFIG_PCNET=y
-CONFIG_BOOTCOMMAND="setenv serverip 10.0.2.2; setenv ipaddr 10.0.2.15; setenv netmask 255.255.255.0; tftpboot $loadaddr main.wasm; dhcp; wasm $loadaddr $filesize" 
+CONFIG_BOOTCOMMAND="setenv serverip 10.0.2.2; setenv ipaddr 10.0.2.15; setenv netmask 255.255.255.0; dhcp; tftpboot $loadaddr main.wasm; dhcp; wasm $loadaddr $filesize" 
 CONFIG_SYS_MALLOC_LEN=0x10000000
 SYS_MALLOC_CLEAR_ON_INIT=n
\ No newline at end of file
diff --git a/include/wasm3/m3_config.h b/include/wasm3/m3_config.h
index 63f64eda..f57afbca 100644
--- a/include/wasm3/m3_config.h
+++ b/include/wasm3/m3_config.h
@@ -17,7 +17,7 @@
 #endif
 
 #ifndef d_m3MaxFunctionStackHeight
-#define d_m3MaxFunctionStackHeight 2000 * 2 // max: 32768
+#define d_m3MaxFunctionStackHeight 2000 * 8 // max: 32768
 #endif
 
 #ifndef d_m3MaxLinearMemoryPages
diff --git a/include/wasm_ffi/wasm_ffi.h b/include/wasm_ffi/wasm_ffi.h
index 355ea352..c4b36205 100644
--- a/include/wasm_ffi/wasm_ffi.h
+++ b/include/wasm_ffi/wasm_ffi.h
@@ -12,9 +12,8 @@
  * wasm_ffi_link_all() - Link all functions in the WASM module.
  *
  * @module:   WASM module
- * @return:   true if all functions were linked successfully, false otherwise
+ * @return:   false if all functions were linked successfully, true otherwise
  */
 bool wasm_ffi_link_all(IM3Module module);
 
-
 #endif /* __WASM_FFI_H__ */
diff --git a/include/wasm_ffi/wasm_sys.h b/include/wasm_ffi/wasm_sys.h
index 8f13c4f5..9eab28e4 100644
--- a/include/wasm_ffi/wasm_sys.h
+++ b/include/wasm_ffi/wasm_sys.h
@@ -8,25 +8,13 @@
 
 #include <wasm3/wasm3.h>
 
+void set_wasm_chainload_src_addr(unsigned long addr);
+void set_wasm_chainload_src_len(unsigned long len);
+unsigned long get_wasm_chainload_src_addr(void);
+unsigned long get_wasm_chainload_src_len(void);
+
 /*
  * Print a string from the WebAssembly (WASM) environment.
- *
- * This function retrieves a memory pointer and size from the WASM runtime,
- * validates the memory range, and then prints the string to the console.
- * It ensures safe access to the provided memory.
- *
- * Arguments:
- *   - i_ptr: Pointer to the string in WASM memory.
- *   - i_size: Size of the string (number of bytes).
- *
- * Behavior:
- *   - The function validates the memory pointer and size to prevent
- * out-of-bounds access.
- *   - The string is printed to the console using the specified size.
- *
- * Returns:
- *   - Success if the string is printed successfully.
- *   - An error if the memory validation fails.
  */
 m3ApiRawFunction(env_print);
 
@@ -53,4 +41,59 @@ m3ApiRawFunction(env_key_pressed);
  */
 m3ApiRawFunction(env_now);
 
+/*
+ * Allocate memory in the WASM environment.
+ *
+ * This function allocates a block of memory in the WASM environment
+ * and returns a pointer to the allocated memory.
+ */
+m3ApiRawFunction(env_malloc);
+
+/*
+ * Free memory in the WASM environment.
+ *
+ * This function frees a block of memory in the WASM environment.
+ */
+m3ApiRawFunction(env_free);
+
+/*
+ * Copy memory in the WASM environment.
+ *
+ * This function copies a block of memory from one location to another.
+ */
+m3ApiRawFunction(env_memcpy);
+
+/*
+ * Set the WASM chainload source address and size.
+ *
+ * This function sets the WASM chainload source address and size.
+ */
+m3ApiRawFunction(env_set_wasm_chainload);
+
+/*
+ * Retrieve random bytes from the system's random number generator.
+ *
+ * This function utilizes the `random_get()` API to obtain random bytes
+ * from the system's random number generator. The result is returned as
+ * a 32-bit integer, ensuring compatibility with large time values.
+ */
+m3ApiRawFunction(wasi_snapshot_preview1_random_get);
+
+/*
+ * Retrieve the current system time in milliseconds.
+ *
+ * This function utilizes the `clock_time_get()` API to obtain the current
+ * time value, measured relative to system start or reset. The result
+ * is returned as a 64-bit integer, ensuring compatibility with large
+ * time values.
+ */
+m3ApiRawFunction(wasi_snapshot_preview1_clock_time_get);
+
+/*
+ * Yield the current thread to allow other threads to run.
+ *
+ * This is a no-op on the WebAssembly platform.
+ */
+m3ApiRawFunction(wasi_snapshot_preview1_sched_yield);
+
 #endif /* __WASM_SYS_H__ */
diff --git a/lib/wasm3/m3_compile.c b/lib/wasm3/m3_compile.c
index 08abf473..38105284 100644
--- a/lib/wasm3/m3_compile.c
+++ b/lib/wasm3/m3_compile.c
@@ -1706,6 +1706,8 @@ static M3Result Compile_Call(IM3Compilation o, m3opcode_t i_opcode)
             }
             else
             {
+                printf("function module not found: %s\n", GetFunctionImportModuleName(function));
+                printf("function not found: %s\n", m3_GetFunctionName(function));
                 _throw(ErrorCompile(m3Err_functionImportMissing, o, "'%s.%s'", GetFunctionImportModuleName(function), m3_GetFunctionName(function)));
             }
         }
diff --git a/lib/wasm_ffi/wasm_ffi.c b/lib/wasm_ffi/wasm_ffi.c
index ac22d183..e72d99f7 100644
--- a/lib/wasm_ffi/wasm_ffi.c
+++ b/lib/wasm_ffi/wasm_ffi.c
@@ -8,16 +8,16 @@
 #include <wasm_ffi/wasm_net.h>
 #include <wasm_ffi/wasm_sys.h>
 
-#define LINK_RAW_FUNCTION(module, func_name, sig, func_ptr)                                                            \
+#define LINK_RAW_FUNCTION(module, env_name, func_name, sig, func_ptr)                                                  \
     do                                                                                                                 \
     {                                                                                                                  \
         /* Attempt to link the raw function */                                                                         \
-        M3Result result = m3_LinkRawFunction(module, "env", func_name, sig, func_ptr);                                 \
+        M3Result result = m3_LinkRawFunction(module, env_name, func_name, sig, func_ptr);                              \
                                                                                                                        \
         /* Handle errors from the linking process */                                                                   \
         if (result != m3Err_none && result != m3Err_functionLookupFailed)                                              \
         {                                                                                                              \
-            printf("Error linking function '%s': %s\n", func_name, result);                                           \
+            printf("Error linking function '%s': %s\n", func_name, result);                                            \
             return 1;                                                                                                  \
         }                                                                                                              \
     } while (0)
@@ -25,34 +25,41 @@
 bool wasm_ffi_link_all(IM3Module module)
 {
     /* Sys functions */
-    LINK_RAW_FUNCTION(module, "env_print", "v(*i)", &env_print);
-    LINK_RAW_FUNCTION(module, "env_key_pressed", "i()", &env_key_pressed);
-    LINK_RAW_FUNCTION(module, "env_now", "I()", &env_now);
+    LINK_RAW_FUNCTION(module, "env", "env_print", "v(*i)", &env_print);
+    LINK_RAW_FUNCTION(module, "env", "env_key_pressed", "i()", &env_key_pressed);
+    LINK_RAW_FUNCTION(module, "env", "env_now", "I()", &env_now);
+    LINK_RAW_FUNCTION(module, "env", "env_malloc", "I(i)", &env_malloc);
+    LINK_RAW_FUNCTION(module, "env", "env_free", "i(I)", &env_free);
+    LINK_RAW_FUNCTION(module, "env", "env_memcpy", "i(*Ii)", &env_memcpy);
+    LINK_RAW_FUNCTION(module, "env", "env_set_wasm_chainload", "v(Ii)", &env_set_wasm_chainload);
+    LINK_RAW_FUNCTION(module, "wasi_snapshot_preview1", "random_get", "i(*i)", &wasi_snapshot_preview1_random_get);
+    LINK_RAW_FUNCTION(module, "wasi_snapshot_preview1", "clock_time_get", "i(iI*)",
+                      &wasi_snapshot_preview1_clock_time_get);
+    LINK_RAW_FUNCTION(module, "wasi_snapshot_preview1", "sched_yield", "i()", &wasi_snapshot_preview1_sched_yield);
 
     /* Network functions */
-    LINK_RAW_FUNCTION(module, "env_net_setup", "i()", &net_setup);
-    LINK_RAW_FUNCTION(module, "env_net_teardown", "i()", &net_teardown);
-    LINK_RAW_FUNCTION(module, "env_net_rx", "i()", &net_rx);
-
+    LINK_RAW_FUNCTION(module, "env", "env_net_setup", "i()", &net_setup);
+    LINK_RAW_FUNCTION(module, "env", "env_net_teardown", "i()", &net_teardown);
+    LINK_RAW_FUNCTION(module, "env", "env_net_rx", "i()", &net_rx);
 
     /* DNS functions */
-    LINK_RAW_FUNCTION(module, "env_net_dns_set_server", "v(i)", &net_dns_set_server_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_dns_lookup", "i(*i)", &net_dns_lookup_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_dns_lookup_poll", "i()", &net_dns_lookup_poll_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_dns_lookup_result", "i()", &net_dns_lookup_result_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_dns_set_server", "v(i)", &net_dns_set_server_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_dns_lookup", "i(*i)", &net_dns_lookup_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_dns_lookup_poll", "i()", &net_dns_lookup_poll_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_dns_lookup_result", "i()", &net_dns_lookup_result_ffi);
 
     /* Socket functions */
-    LINK_RAW_FUNCTION(module, "env_net_socket_new_tcp", "i()", &net_socket_new_tcp_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_new_udp", "i()", &net_socket_new_udp_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_free", "i(i)", &net_socket_free_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_connect", "i(iii)", &net_socket_connect_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_connect_poll", "i(i)", &net_socket_connect_poll_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_bind", "i(iii)", &net_socket_bind_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_listen", "i(ii)", &net_socket_listen_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_accept", "i(i)", &net_socket_accept_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_accept_poll", "i(i)", &net_socket_accept_poll_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_read", "i(i*i)", &net_socket_read_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_write", "i(i*i)", &net_socket_write_ffi);
-    LINK_RAW_FUNCTION(module, "env_net_socket_write_poll", "i(i)", &net_socket_write_poll_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_new_tcp", "i()", &net_socket_new_tcp_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_new_udp", "i()", &net_socket_new_udp_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_free", "i(i)", &net_socket_free_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_connect", "i(iii)", &net_socket_connect_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_connect_poll", "i(i)", &net_socket_connect_poll_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_bind", "i(iii)", &net_socket_bind_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_listen", "i(ii)", &net_socket_listen_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_accept", "i(i)", &net_socket_accept_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_accept_poll", "i(i)", &net_socket_accept_poll_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_read", "i(i*i)", &net_socket_read_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_write", "i(i*i)", &net_socket_write_ffi);
+    LINK_RAW_FUNCTION(module, "env", "env_net_socket_write_poll", "i(i)", &net_socket_write_poll_ffi);
     return 0;
 }
\ No newline at end of file
diff --git a/lib/wasm_ffi/wasm_socket.c b/lib/wasm_ffi/wasm_socket.c
index 1d006705..4072ba26 100644
--- a/lib/wasm_ffi/wasm_socket.c
+++ b/lib/wasm_ffi/wasm_socket.c
@@ -84,7 +84,7 @@ static err_t tcp_recv_callback(void *arg, struct tcp_pcb *pcb, struct pbuf *p, e
 {
     int8_t index = (int8_t)(uintptr_t)arg;
 
-    // printf("tcp_recv_callback: index = %d, err = %d, len = %d\n", index, err, p->tot_len);
+    // printf("tcp_recv_callback: index = %d, err = %d\n", index, err);
 
     /* Get the socket */
     net_socket_t *sock = net_socket_get(index);
@@ -96,15 +96,20 @@ static err_t tcp_recv_callback(void *arg, struct tcp_pcb *pcb, struct pbuf *p, e
     /* Append the received data to the socket's receive buffer */
     if (sock->recv_buffer != NULL)
     {
+        // printf("tcp_recv_callback: appending data to buffer\n");
         pbuf_cat(sock->recv_buffer, p);
     }
     else
     {
+        // printf("tcp_recv_callback: setting buffer\n");
         sock->recv_buffer = p;
     }
 
+    // printf("tcp_recv_callback: recv_buffer = %d\n", sock->recv_buffer->tot_len);
+
     return ERR_OK;
 }
+
 static err_t tcp_connect_callback(void *arg, struct tcp_pcb *pcb, err_t err)
 {
     int8_t index = (int8_t)(uintptr_t)arg;
@@ -156,7 +161,7 @@ static err_t tcp_accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err)
     }
 
     /* Set the connection socket */
-    net_context_t* net_ctx = net_context_get();
+    net_context_t *net_ctx = net_context_get();
     memset(&net_ctx->sockets[client_index], 0, sizeof(net_socket_t));
     net_ctx->sockets[client_index].type = CONN_TCP;
     net_ctx->sockets[client_index].pcb.tcp = newpcb;
@@ -212,7 +217,7 @@ err_t net_socket_new(enum conn_type_t conn_type)
     }
 
     /* Initialize socket structure */
-    net_context_t* net_ctx = net_context_get();
+    net_context_t *net_ctx = net_context_get();
     memset(&net_ctx->sockets[index], 0, sizeof(net_socket_t));
     net_ctx->sockets[index].type = conn_type;
 
@@ -262,7 +267,7 @@ net_socket_t *net_socket_get(int8_t index)
     }
 
     /* Return NULL if socket is not active */
-    net_context_t* net_ctx = net_context_get();
+    net_context_t *net_ctx = net_context_get();
     if (!(net_ctx->active_connection_bitfield & (1ULL << index)))
     {
         return NULL;
@@ -322,7 +327,7 @@ err_t net_socket_free(int8_t index)
     memset(sock, 0, sizeof(net_socket_t));
 
     /* Mark socket as inactive */
-    net_context_t* net_ctx = net_context_get();
+    net_context_t *net_ctx = net_context_get();
     net_ctx->active_connection_bitfield &= ~(1ULL << index);
 
     return ERR_OK;
@@ -475,6 +480,7 @@ err_t net_socket_listen(int8_t index, uint16_t backlog)
 
 err_t net_socket_accept(int8_t index)
 {
+    // printf("net_socket_accept: index = %d\n", index);
     /* Get the socket */
     net_socket_t *sock = net_socket_get(index);
     if (!sock)
@@ -521,7 +527,7 @@ err_t net_socket_accept_poll(int8_t index)
     }
 
     /* Find the newly created accept socket */
-    net_context_t* net_ctx = net_context_get();
+    net_context_t *net_ctx = net_context_get();
     net_socket_t *accept_sock = NULL;
     int accept_sock_index = -1;
     for (int i = 0; i < MAX_NETWORK_SOCKETS; i++)
@@ -548,6 +554,7 @@ err_t net_socket_accept_poll(int8_t index)
 
 err_t net_socket_read(int8_t index, void *buffer, uint32_t length)
 {
+    // printf("net_socket_read: index = %d, length = %d\n", index, length);
     /* Get the socket */
     net_socket_t *sock = net_socket_get(index);
     if (!sock)
@@ -572,17 +579,21 @@ err_t net_socket_read(int8_t index, void *buffer, uint32_t length)
     uint16_t read_len = pbuf_copy_partial(p, buffer, length, sock->recv_bytes);
     sock->recv_bytes += read_len;
 
-    if (sock->type == CONN_TCP)
-    {
-        tcp_recved(sock->pcb.tcp, read_len);
-    }
+    // printf("net_socket_read: read_len = %d, sock->recv_bytes = %d\n", read_len, sock->recv_bytes);
 
     /* If we've read all data, free the buffer */
     if (sock->recv_bytes == p->tot_len)
     {
+        // printf("net_socket_read: freeing buffer\n");
         pbuf_free(p);
         sock->recv_buffer = NULL;
         sock->recv_bytes = 0;
+
+        if (sock->type == CONN_TCP)
+        {
+            // printf("net_socket_read: calling tcp_recved\n");
+            tcp_recved(sock->pcb.tcp, p->tot_len);
+        }
     }
 
     return read_len;
diff --git a/lib/wasm_ffi/wasm_sys.c b/lib/wasm_ffi/wasm_sys.c
index 46f4aefc..32e0b018 100644
--- a/lib/wasm_ffi/wasm_sys.c
+++ b/lib/wasm_ffi/wasm_sys.c
@@ -3,10 +3,37 @@
  * Copyright (C) 2025, Mathias Gredal, mathiasgredal@icloud.com.
  */
 
+#include "wasm3/wasm3.h"
+#include <stdint.h>
 #include <stdio.h>
+#include <stdlib.h>
 #include <time.h>
 #include <wasm_ffi/wasm_sys.h>
 
+// TODO: Make an A/B storage for this, in order to free the old WASM module
+static unsigned long wasm_chainload_src_addr = 0;
+static unsigned long wasm_chainload_src_len = 0;
+
+void set_wasm_chainload_src_addr(unsigned long addr)
+{
+    wasm_chainload_src_addr = addr;
+}
+
+unsigned long get_wasm_chainload_src_addr(void)
+{
+    return wasm_chainload_src_addr;
+}
+
+void set_wasm_chainload_src_len(unsigned long len)
+{
+    wasm_chainload_src_len = len;
+}
+
+unsigned long get_wasm_chainload_src_len(void)
+{
+    return wasm_chainload_src_len;
+}
+
 m3ApiRawFunction(env_print)
 {
     /* Retrieve the pointer to the string */
@@ -52,4 +79,75 @@ m3ApiRawFunction(env_now)
 
     /* Return the retrieved time */
     m3ApiReturn(now);
-}
\ No newline at end of file
+}
+
+m3ApiRawFunction(env_malloc)
+{
+    m3ApiReturnType(int64_t);
+    m3ApiGetArg(uint32_t, size);
+    void *ptr = malloc(size);
+    m3ApiReturn((int64_t)ptr);
+}
+
+m3ApiRawFunction(env_free)
+{
+    m3ApiReturnType(int32_t);
+    m3ApiGetArg(int64_t, ptr);
+    free((void *)ptr);
+    m3ApiReturn(0);
+}
+
+m3ApiRawFunction(env_memcpy)
+{
+    m3ApiReturnType(int32_t);
+    m3ApiGetArgMem(void *, src);
+    m3ApiGetArg(int64_t, dest);
+    m3ApiGetArg(uint32_t, len);
+    memcpy((void *)dest, src, len);
+    m3ApiReturn(0);
+}
+
+m3ApiRawFunction(env_set_wasm_chainload)
+{
+    m3ApiGetArg(int64_t, src);
+    m3ApiGetArg(uint32_t, len);
+    wasm_chainload_src_addr = src;
+    wasm_chainload_src_len = len;
+    m3ApiSuccess();
+}
+
+m3ApiRawFunction(wasi_snapshot_preview1_random_get)
+{
+    m3ApiReturnType(int32_t);
+    m3ApiGetArgMem(void *, buf);
+    m3ApiGetArg(uint32_t, buf_len);
+    // TODO: implement proper randomness
+    static int x = 1234;
+    for (int i = 0; i < buf_len; i++)
+    {
+        x += 0x6D2B79F5UL;
+        uint32_t z = (x += 0x6D2B79F5UL);
+        z = (z ^ (z >> 15)) * (z | 1UL);
+        z ^= z + (z ^ (z >> 7)) * (z | 61UL);
+        ((uint8_t *)buf)[i] = z ^ (z >> 14);
+    }
+    m3ApiReturn(0);
+}
+
+m3ApiRawFunction(wasi_snapshot_preview1_clock_time_get)
+{
+    m3ApiReturnType(uint32_t);
+    m3ApiGetArg(uint32_t, wasi_clk_id);
+    m3ApiGetArg(uint64_t, precision);
+    m3ApiGetArgMem(uint64_t *, time);
+
+    *time = get_timer(0);
+
+    m3ApiReturn(0);
+}
+
+m3ApiRawFunction(wasi_snapshot_preview1_sched_yield)
+{
+    m3ApiReturnType(uint32_t);
+    m3ApiReturn(0);
+}
-- 
2.39.3 (Apple Git-146)

